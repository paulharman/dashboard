{"version":3,"sources":["webpack:///./src/app/ud-element.jsx"],"names":["UdElement","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","hidden","React","Component","str","substring","length","test","isGuid","props","id","pubSubToken","PubSub","subscribe","onIncomingEvent","bind","eventName","event","type","setState","unsubscribe","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","UDElementContent","_this2","content","tag","attributes","events","loading","hasError","errorMessage","fetchGet","data","error","message","info","hasCallback","loadData","js","$","getScript","getApiPath","e","val","target","value","checked","i","publish","eventId","eventData","preventUnregister","fetchPost","concat","requestId","elements","Array","refs","element","selectedOptions","item","isNaN","push","JSON","stringify","_error_card_jsx__WEBPACK_IMPORTED_MODULE_6__","renderComponent","_objectSpread","componentName","history","children","map","x","onUserEvent","onChange","onTextboxChanged","onCheckboxChanged","ref","key","react_interval__WEBPACK_IMPORTED_MODULE_5___default","timeout","refreshInterval","enabled","autoRefresh","callback"],"mappings":"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","file":"ud-element.189099de3849a15af466.bundle.js","sourcesContent":["import React from 'react';\r\nimport renderComponent from './services/render-service.jsx';\r\nimport PubSub from 'pubsub-js';\r\nimport {fetchGet, fetchPost} from './services/fetch-service.jsx';\r\nimport {getApiPath} from 'config';\r\nimport ReactInterval from 'react-interval';\r\nimport ErrorCard from './error-card.jsx';\r\nimport $ from 'jquery';\r\n\r\nexport default class UdElement extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hidden: false\r\n        }\r\n    }\r\n\r\n    isGuid(str) {\r\n        if (str == null) { return false }\r\n\r\n        if (str[0] === \"{\") \r\n        {\r\n            str = str.substring(1, str.length - 1);\r\n        }\r\n        var regexGuid = /^(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}$/gi;\r\n        var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(str);\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (!this.isGuid(this.props.id)) {\r\n            this.pubSubToken = PubSub.subscribe(this.props.id, this.onIncomingEvent.bind(this));\r\n        }\r\n    }\r\n\r\n    onIncomingEvent(eventName, event) {\r\n        if (event.type === \"removeElement\") {\r\n            this.setState({\r\n                hidden: true\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.hidden && this.pubSubToken != null) {\r\n            PubSub.unsubscribe(this.pubSubToken);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.pubSubToken != null) {\r\n            PubSub.unsubscribe(this.pubSubToken);\r\n        }\r\n    }\r\n\r\n    render() {   \r\n        if (this.state.hidden) {\r\n            return null;\r\n        }\r\n        return <UDElementContent {...this.props} />\r\n    }\r\n}\r\n\r\nclass UDElementContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            content : props.content,\r\n            tag : props.tag,\r\n            attributes: props.attributes,\r\n            events: props.events,\r\n            loading: true,\r\n            hasError: false,\r\n            errorMessage: ''\r\n        }\r\n    }\r\n\r\n    loadData()\r\n    { \r\n        fetchGet(\"/api/internal/component/element/\" + this.props.id, function(data) {\r\n            if (data.error) {\r\n                this.setState({\r\n                    hasError: true, \r\n                    errorMessage: data.error.message\r\n                })\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                content: data,\r\n                loading: false\r\n            });\r\n        }.bind(this));\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true, errorMessage: error.message });\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.pubSubToken = PubSub.subscribe(this.props.id, this.onIncomingEvent.bind(this));\r\n        if (this.props.hasCallback) {\r\n            this.loadData();\r\n        }\r\n        else \r\n        {\r\n            if (this.props.js) {\r\n                $.getScript(getApiPath() + \"/api/internal/javascript/\" + this.props.js, function() {\r\n                    this.setState({\r\n                        loading: false\r\n                    })\r\n                }.bind(this));\r\n            }\r\n            else {\r\n                this.setState({\r\n                    loading: false\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onTextboxChanged(e) {\r\n        var val = e.target.value;\r\n        this.state.attributes.value = val;\r\n\r\n        this.setState({\r\n            attributes : this.state.attributes\r\n        });\r\n    }\r\n\r\n    onCheckboxChanged(e) {\r\n        var val = e.target.value;\r\n        val = e.target.checked;\r\n        this.state.attributes.checked = val;\r\n\r\n        this.setState({\r\n            attributes : this.state.attributes\r\n        });\r\n\r\n        for(var i = 0; i < this.state.events.length; i++) {\r\n            if (this.state.events[i].event === 'onChange') {\r\n\r\n                var event = this.state.events[i];\r\n\r\n                PubSub.publish('element-event', {\r\n                    type: \"clientEvent\",\r\n                    eventId: event.id,\r\n                    eventName: 'onChange',\r\n                    eventData: val\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (!this.props.preventUnregister) {\r\n            if (this.state.events != null) {\r\n                for(var i = 0; i < this.state.events.length; i++) {\r\n                    PubSub.publish('element-event', {\r\n                        type: \"unregisterEvent\",\r\n                        eventId: this.state.events[i].id\r\n                    });\r\n                }\r\n            }\r\n    \r\n            if (this.props.hasCallback) {\r\n                PubSub.publish('element-event', {\r\n                    type: \"unregisterEvent\",\r\n                    eventId: this.props.id\r\n                });\r\n            }\r\n        }\r\n\r\n        PubSub.unsubscribe(this.pubSubToken);\r\n    }\r\n\r\n    onIncomingEvent(eventName, event) {\r\n        if (event.type === \"setState\") {\r\n            this.setState(event.state);\r\n        }\r\n        else if (event.type === \"requestState\") {\r\n            fetchPost(`/api/internal/component/element/sessionState/${event.requestId}`, this.state);\r\n        } else if (event.type === \"removeElement\") {\r\n            this.setState({\r\n                hidden: true\r\n            })\r\n        } else if (event.type === \"addElement\") {\r\n\r\n            var content = this.state.content;\r\n            if (content == null) {\r\n                content = []\r\n            }\r\n\r\n            content = content.concat(event.elements);\r\n\r\n            this.setState({\r\n                content\r\n            })\r\n        } else if (event.type === \"clearElement\") {\r\n            this.setState({\r\n                content: null\r\n            })\r\n        } else if (event.type === \"syncElement\") {\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    onUserEvent(event, e) {\r\n        var eventName = null;\r\n        var val = null;\r\n        if (this.state.tag === 'select') {\r\n\r\n            val = new Array();\r\n\r\n            if (this.refs.element.selectedOptions) {\r\n                for(var item in  this.refs.element.selectedOptions) {\r\n                    if (isNaN(item)) continue;\r\n                    var value = this.refs.element.selectedOptions[item].value;\r\n                    val.push(value);\r\n                }\r\n            }\r\n            else {\r\n                val.push(this.refs.element.value);\r\n            }\r\n\r\n            if (val.length === 1) {\r\n                val = val[0]\r\n            }\r\n            else {\r\n                val = JSON.stringify(val);\r\n            }\r\n\r\n            for(var i = 0; i < this.state.events.length; i++) {\r\n                if (this.state.events[i].event === 'onChange') {\r\n                    event = this.state.events[i];\r\n                }\r\n            }\r\n            eventName = 'onChange'\r\n        }\r\n        else {\r\n            eventName = event.event;\r\n            val = e.target.value;\r\n            if (val != null && val.checked != null) {\r\n                val = e.target.checked;\r\n            }\r\n        }\r\n\r\n        this.state.attributes.value = val;\r\n        this.setState(this.state);\r\n\r\n        PubSub.publish('element-event', {\r\n            type: \"clientEvent\",\r\n            eventId: event.id,\r\n            eventName: eventName,\r\n            eventData: val\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hidden) {\r\n            return null;\r\n        }\r\n\r\n        if (this.state.hasError) {\r\n            return <ErrorCard message={this.state.errorMessage} />\r\n        }\r\n\r\n        if (this.props.error) {\r\n            return <ErrorCard message={this.props.error.message} />\r\n        }\r\n\r\n        if (this.state.loading) {\r\n            return <div></div>\r\n        }\r\n\r\n        if (this.props.js) {\r\n            return renderComponent({\r\n                type: this.props.componentName,\r\n                ...this.props.props\r\n            }, this.props.history)\r\n        }\r\n\r\n        var children = null;\r\n        \r\n        if (this.state.content && this.state.content.map) {\r\n            children = this.state.content.map(function(x) {\r\n                if (x.type != null) {\r\n                    return renderComponent(x, this.props.history);\r\n                } \r\n                return x;\r\n            }.bind(this));\r\n        }\r\n        else if (this.state.content) {\r\n            children = this.state.content;\r\n        }\r\n\r\n        var attributes = this.state.attributes;\r\n\r\n        if (attributes == null) {\r\n            attributes = {}\r\n        }\r\n\r\n        if (attributes.id == null) {\r\n            attributes.id = this.props.id;\r\n        }\r\n\r\n        if (this.state.events != null && this.state.events.map) {\r\n            this.state.events.map(function(event) {\r\n                attributes[event.event] = function(e) {\r\n                    this.onUserEvent(event, e);\r\n                }.bind(this);\r\n                return null;\r\n            }.bind(this));\r\n        }\r\n\r\n        if (this.state.tag === \"input\") {\r\n            if (attributes.type === \"text\" || attributes.type === \"password\") {\r\n                attributes.onChange = this.onTextboxChanged.bind(this);\r\n            }\r\n\r\n            if (attributes.type === \"checkbox\") {\r\n                attributes.onChange = this.onCheckboxChanged.bind(this);\r\n            }\r\n        }\r\n\r\n        if (this.state.tag === \"textarea\") {\r\n            attributes.onChange = this.onTextboxChanged.bind(this);\r\n        }\r\n\r\n        attributes.ref = 'element';\r\n        attributes.key = this.props.key;\r\n\r\n        this.element = React.createElement(this.state.tag, attributes, children);\r\n\r\n    return [this.element, \r\n            <ReactInterval timeout={this.props.refreshInterval * 1000} enabled={this.props.autoRefresh} callback={this.loadData.bind(this)}/>];\r\n    }\r\n}\r\n"],"sourceRoot":""}